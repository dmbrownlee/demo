---
- name: Ensure boxname is set to {{ distro }}-{{ version }}-{{ configuration }}
  ansible.builtin.set_fact:
    boxname: "{{ distro }}-{{ version }}-{{ configuration }}"
- name: Read variables from vars/{{ distro }}-{{ version }}.yml
  ansible.builtin.include_vars: "{{ distro }}-{{ version }}.yml"
- name: Ensure we have a packer config file for {{ distro }}-{{ version }}-{{ configuration }}
  ansible.builtin.template:
    dest: "{{ packer.build_dir }}/{{ distro }}-{{ version }}-{{ configuration }}.json"
    src: "{{ packer_template }}"
    mode: '0600'
    force: yes
- name: Ensure we import the variables for the {{ configuration }} configuration
  ansible.builtin.include_vars:
    file: "{{ distro }}-{{ version }}-{{ configuration }}-packages.yml"
- name: Ensure we have an installer file ({{ install_file }})
  ansible.builtin.template:
    dest: "{{ packer.build_dir }}/{{ install_file }}"
    src: "{{ templateks }}"
    mode: '0600'
    force: yes
  when: templateks is defined and templateks != 'none'
- name: Check for gzipped ISO in download directory
  ansible.builtin.stat:
    path: "{{ user.download_dir }}/{{ iso_name }}.gz"
    checksum_algorithm: sha256
  register: gziso
  when: iso.gzipped
- name: Ensure the ISO has been pre-downloaded if it needs to be unzipped
  ansible.builtin.get_url:
    dest: "{{ user.download_dir }}"
    url: "{{ iso.url }}"
    checksum: "{{ iso.gzip_checksum }}"
  when:
    - iso.gzipped
    - not gziso.stat.exists
- name: Ensure zipped ISO has been unzipped
  ansible.builtin.command:
    cmd: gunzip -k {{ iso_name }}.gz
    chdir: "{{ user.download_dir }}"
    creates: "{{ iso_name }}"
  when: iso.gzipped
- name: Build the base box if it is currently unavailable
  ansible.builtin.include_tasks: buildbox.yml
  when:
    - host.buildvms|bool
    - boxname not in vagrant_box_list
