# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.ssh.private_key_path = "/Users/student/keys/vagrant"
  # These are the VM configuration defaults when not overridden
  config.vm.box = "rocky-9-minimal"
  config.vm.synced_folder "labfiles/", "/labfiles",
    id: "labfiles",
    owner: "root",
    group: "root"
  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.provider :virtualbox do |virtualbox|
    virtualbox.gui = false
    virtualbox.memory = 2048
    virtualbox.customize ["modifyvm", :id, "--firmware", "EFI"]
    virtualbox.customize ["modifyvm", :id, "--cableconnected1", "on"]
    virtualbox.customize ["modifyvm", :id, "--nic2", "natnetwork"]
    virtualbox.customize ["modifyvm", :id, "--nat-network2", "RHCSA Network"]
    virtualbox.customize ["setextradata", :id, "GUI/ScaleFactor", "2.0"]
  end
  config.vm.provision :ansible do |ansible|
    ansible.playbook = "ansible/site.yml"
    ansible.skip_tags = "disabled"
    ansible.groups = {
      "rocky9" => [
        "idm1",
        "control",
        "ansible1",
        "ansible2",
        "server1",
        "server2",
        "exam1",
        "exam2"
      ],
      "nmhosts" => [
        "idm1",
        "control",
        "ansible1",
        "ansible2",
        "server1",
        "server2",
        "exam1",
        "exam2"
      ],
      "labhosts" => [
        "server1",
        "server2"
      ],
      "servers_with_gui" => [
        "server1"
      ],
      "ftp_servers" => [
        "idm1"
      ],
      "nfs_servers" => [
        "idm1"
      ],
      "samba_servers" => [
        "idm1"
      ],
      "idm_servers" => [
        "idm1"
      ],
      "examhosts" => [
        "exam1",
        "exam2"
      ]
    }
  end

  #====================
  #==  Lab Machines  ==
  #====================
  #=== idm1 ==
  config.vm.define "idm1" do |node|
    node.vm.box = "rocky-9-minimal"
    node.vm.provider :virtualbox do |virtualbox|
      virtualbox.name = "idm1"
      virtualbox.memory = 4096
    end
  end

  #=== control ==
  config.vm.define "control", autostart: false do |node|
    node.vm.box = "rocky-9-minimal"
    node.vm.provider :virtualbox do |virtualbox|
      virtualbox.name = "control"
    end
  end

  #=== ansible1 ===
  config.vm.define "ansible1", autostart: false do |node|
    node.vm.box = "rocky-9-core"
    node.vm.provider :virtualbox do |virtualbox|
      virtualbox.name = "ansible1"
    end
  end

  #=== ansible2 ===
  config.vm.define "ansible2", autostart: false do |node|
    node.vm.box = "rocky-9-core"
    node.vm.provider :virtualbox do |virtualbox|
      virtualbox.name = "ansible2"
    end
  end

  #=== server1 ==
  config.vm.define "server1" do |node|
    node.vm.box = "rocky-9-gse"
    node.vm.provider :virtualbox do |virtualbox|
      virtualbox.name = "server1"
      virtualbox.customize ["storageattach", :id,
        "--storagectl", "IDE Controller",
        "--port", "0",
        "--device", "0",
        "--type", "dvddrive",
        "--medium", "emptydrive"]
    end
  end

  #=== server2 ===
  config.vm.define "server2" do |node|
    node.vm.box = "rocky-9-minimal"
    disk = "#{ENV["HOME"]}/VirtualBox VMs/server2/server2_disk2.vmdk"
    node.vm.provider :virtualbox do |virtualbox|
      virtualbox.name = "server2"
      # Create and attach a new, empty disk with the same name
      if not File.file?(disk)
        virtualbox.customize ['createhd', '--filename', disk, '--variant',
          'Standard', '--size', 20 * 1024]
        virtualbox.customize ["storageattach", :id,
          "--storagectl", "SATA Controller",
          "--type", "hdd",
          "--port", "1",
          "--device", "0",
          "--medium", disk]
      end
      virtualbox.customize ["storageattach", :id,
        "--storagectl", "IDE Controller",
        "--port", "0",
        "--device", "0",
        "--type", "dvddrive",
        "--medium", "emptydrive"]
    end
  end

  #==============================
  #==  Additional Lab Machines ==
  #==============================
  #=== installhost ===
  config.vm.define "installhost", autostart: false do |node|
    node.vm.boot_timeout = 1
    node.vm.box = "rocky-9-core"
    disk = "#{ENV["HOME"]}/VirtualBox VMs/installhost/rocky-9-disk001.vmdk"
    disk1 = "#{ENV["HOME"]}/VirtualBox VMs/installhost/installhost-disk001.vmdk"
    disk2 = "#{ENV["HOME"]}/VirtualBox VMs/installhost/installhost-disk002.vmdk"
    node.vm.provider :virtualbox do |virtualbox|
      virtualbox.name = "installhost"
      virtualbox.gui = true
      # Dettach and destroy original disk
      if File.file?(disk)
        virtualbox.customize ["storageattach", :id,
          "--storagectl", "SATA Controller",
          "--port", "0",
          "--device", "0",
          "--medium", 'none']
        virtualbox.customize ['closemedium', 'disk', disk, '--delete']
      end
      # Create and attach a new, empty disk
      if not File.file?(disk1)
        virtualbox.customize ['createhd', '--filename', disk1, '--variant',
          'Standard', '--size', 20 * 1024]
        virtualbox.customize ["storageattach", :id,
          "--storagectl", "SATA Controller",
          "--type", "hdd",
          "--port", "0",
          "--device", "0",
          "--medium", disk1]
      end
      # Create and attach a new, empty, secondary disk
      if not File.file?(disk2)
        virtualbox.customize ['createhd', '--filename', disk2, '--variant',
          'Standard', '--size', 20 * 1024]
        virtualbox.customize ["storageattach", :id,
          "--storagectl", "SATA Controller",
          "--type", "hdd",
          "--port", "1",
          "--device", "0",
          "--medium", disk2]
      end
      # Make sure the installation media is in the drive
      virtualbox.customize ["storageattach", :id,
        "--storagectl", "IDE Controller",
        "--type", "dvddrive",
        "--port", "0",
        "--device", "0",
        "--medium", "#{ENV["HOME"]}/Downloads/Rocky-9.0-x86_64-dvd.iso"]
      # virtualbox.customize ["modifyvm", :id, "--boot1", "DVD", "--boot2", "disk"]
    end
    node.vm.provision "default", type: :shell, run: "never" do |shell|
      shell.inline = "echo"
    end
  end
  #=== installhost2 (BIOS) ===
  config.vm.define "installhost2", autostart: false do |node|
    node.vm.boot_timeout = 1
    node.vm.box = "rocky-9-core"
    disk = "#{ENV["HOME"]}/VirtualBox VMs/installhost/rocky-9-disk001.vmdk"
    disk1 = "#{ENV["HOME"]}/VirtualBox VMs/installhost/installhost-disk001.vmdk"
    disk2 = "#{ENV["HOME"]}/VirtualBox VMs/installhost/installhost-disk002.vmdk"
    node.vm.provider :virtualbox do |virtualbox|
      virtualbox.name = "installhost2"
      virtualbox.gui = true
      virtualbox.customize ["modifyvm", :id, "--firmware", "bios"]
      # Dettach and destroy original disk
      if File.file?(disk)
        virtualbox.customize ["storageattach", :id,
          "--storagectl", "SATA Controller",
          "--port", "0",
          "--device", "0",
          "--medium", 'none']
        virtualbox.customize ['closemedium', 'disk', disk, '--delete']
      end
      # Create and attach a new, empty disk
      if not File.file?(disk1)
        virtualbox.customize ['createhd', '--filename', disk1, '--variant',
          'Standard', '--size', 20 * 1024]
        virtualbox.customize ["storageattach", :id,
          "--storagectl", "SATA Controller",
          "--type", "hdd",
          "--port", "0",
          "--device", "0",
          "--medium", disk1]
      end
      # Create and attach a new, empty, secondary disk
      if not File.file?(disk2)
        virtualbox.customize ['createhd', '--filename', disk2, '--variant',
          'Standard', '--size', 20 * 1024]
        virtualbox.customize ["storageattach", :id,
          "--storagectl", "SATA Controller",
          "--type", "hdd",
          "--port", "1",
          "--device", "0",
          "--medium", disk2]
      end
      # Make sure the installation media is in the drive
      virtualbox.customize ["storageattach", :id,
        "--storagectl", "IDE Controller",
        "--type", "dvddrive",
        "--port", "0",
        "--device", "0",
        "--medium", "#{ENV["HOME"]}/Downloads/Rocky-9.0-x86_64-dvd.iso"]
      # virtualbox.customize ["modifyvm", :id, "--boot1", "DVD", "--boot2", "disk"]
    end
    node.vm.provision "default", type: :shell, run: "never" do |shell|
      shell.inline = "echo"
    end
  end

  #===================================
  #==  Machines for practice exams  ==
  #===================================
  #=== exam1 ===
  config.vm.define "exam1", autostart: false do |node|
    node.vm.box = "rocky-9-core"
    node.vm.provider :virtualbox do |virtualbox|
      virtualbox.name = "exam1"
    end
  end

  #=== exam2 ===
  config.vm.define "exam2", autostart: false do |node|
    node.vm.box = "rocky-9-core"
    disk = "#{ENV["HOME"]}/VirtualBox VMs/exam2/exam2_disk2.vmdk"
    node.vm.provider :virtualbox do |virtualbox|
      virtualbox.name = "exam2"
      # Create and attach a new, empty disk with the same name
      if not File.file?(disk)
        virtualbox.customize ['createhd', '--filename', disk, '--variant',
          'Standard', '--size', 20 * 1024]
        virtualbox.customize ["storageattach", :id,
          "--storagectl", "SATA Controller",
          "--type", "hdd",
          "--port", "1",
          "--device", "0",
          "--medium", disk]
      end
      virtualbox.customize ["storageattach", :id,
        "--storagectl", "IDE Controller",
        "--port", "0",
        "--device", "0",
        "--type", "dvddrive",
        "--medium", "emptydrive"]
    end
  end
end
