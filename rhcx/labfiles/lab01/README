=== LAB 01: Learn to use Vagrant to create VMs
OBJECTIVE
Learn to use Vagrant

SETUP
Before beginning the lab, follow these steps to prepare the hosts indicated
(these steps assume you have followed the installation instructions and have
rebooted the host):

  Host OS:
    On the host machine (not in a VM) run:
      cd ~/demo/rhcx && build
    "build" is a shell function, defined in your ~/.bashrc, that will use
    Vagrant to create the three VMs used in labs.  Vagrant makes it easy to
    build an destroy VMs so you can focus on the lab topics and can start
    over with a cleanly installed VM any time.  Vagrant and Ansible are tools
    for our convenience and are not on the RHCSA/RHCE exams.

    The lab is now configured.

STEPS
For all the steps below, you must be in the ~/demo/rhcx directory.  This
directory contains a file named Vagrantfile which defines the VMs Vagrant
will be managing.  The setup above should have left you with three running
VMs, server1, server2, and labipa.

Shutdown all the VMs cleanly without destroying them:

  vagrant halt

Startup all the VMs again ( --no-parallel is needed to ensure the labipa
VM is started before the others since it is the DHCP server for the virtual
network):

  vagrant up --no-parallel

Shutdown one VM by name (when you don't specify a VM by name, the command
runs on all VMs defined in Vagrantfile):

  vagrant halt server2

Start up the VM by name and also have it re-run the Ansible playbook that
originally configured the VM (VM configuration is always done when the VM
is created but subsequent runs of vagrant up will require --provision if 
you want the configuration step to be run again):

  vagrant up --provision server2

Reboot a VM by name (same as doing vagrant halt followed by vagrant up):

  vagrant reload server2

Completely delete all traces of a VM by name (the -f avoids the "are you
sure?" prompting):

  vagrant destroy -f server2

Now rebuild the VM from scratch (You don't need --provision this time since
the configuration step is always run when the VM is first created):

  vagrant up server2

Since tearing down VMs and rebuilding them is needed to start with a clean
environment and is a common occurance, two helper functions have been 
defined in your ~/.bashrc, build and rebuild.  build is equivalent to
"vagrant up && vagrant reload" and rebuild is equivalent to "vagrant
destroy -f && vagrant up && vagrant reload".  Both functions can take a VM
name as an argument or be run without arguments to effect all VMs.

Destroy and recreate all your VMs:

  rebuild
